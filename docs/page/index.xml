<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Page-rsses on </title>
    <link>/page/index.xml</link>
    <description>Recent content in Page-rsses on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Andrew MacDonald 2017</copyright>
    <lastBuildDate>Wed, 15 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/page/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Writing metadata</title>
      <link>/page/07_writing_metadata/</link>
      <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/page/07_writing_metadata/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;Metadata is &lt;em&gt;data about data&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;hand-made-artisanal-metadata&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;hand-made artisanal metadata&lt;/h2&gt;
&lt;p&gt;You can also do this simply by simple text (&lt;code&gt;.txt&lt;/code&gt; or &lt;code&gt;.rtf&lt;/code&gt;) with your own hands:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/bromeliad_metadata.png&#34; alt=&#34;brom&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;brom&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Alternatively, you could write it in a CSV format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;field,description
country,&amp;quot;countries of the world&amp;quot;&amp;quot;
continent,&amp;quot;continents of the world&amp;quot;
year,&amp;quot;the year AD&amp;quot;
lifeExp,&amp;quot;lifeExp in years&amp;quot;
pop,&amp;quot;population in humans&amp;quot;
gdpPercap,&amp;quot;gdp per capita, measured in PPP&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is convenient, but has no standard whatsoever. This makes it difficult for machines to read. An increasing number of scientists are experimenting with new ways of creating metadata that satisfies our “write data for machines” principle.&lt;/p&gt;
&lt;p&gt;Many of these methods are novel, and rather experimental. We’re going to be using some Very Modern Packages in today’s exercises. We’ll need to install versions of packages that are newer than what is available on CRAN (via &lt;code&gt;install.packages()&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;devtools&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As usual, our gapminder dataset will supply some good examples:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gapminder)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;intro-to-json-and-xml-and-yaml&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;intro to JSON and XML (and YAML)&lt;/h2&gt;
&lt;p&gt;These are the two common languages of the internet: &lt;strong&gt;J&lt;/strong&gt;ava&lt;strong&gt;S&lt;/strong&gt;cript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;N&lt;/strong&gt;otation and e&lt;strong&gt;X&lt;/strong&gt;tensible &lt;strong&gt;M&lt;/strong&gt;arkup &lt;strong&gt;L&lt;/strong&gt;anguage.&lt;/p&gt;
&lt;p&gt;Here’s an example of JSON: from &lt;a href=&#34;https://zapier.com/learn/apis/chapter-3-data-formats/&#34;&gt;this wonderful site&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;javascript&#34;&gt;&lt;code&gt;{
  &amp;quot;crust&amp;quot;: &amp;quot;original&amp;quot;,
  &amp;quot;toppings&amp;quot;: [&amp;quot;cheese&amp;quot;, &amp;quot;pepperoni&amp;quot;, &amp;quot;garlic&amp;quot;],
  &amp;quot;status&amp;quot;: &amp;quot;cooking&amp;quot;,
  &amp;quot;customer&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Brian&amp;quot;,
    &amp;quot;phone&amp;quot;: &amp;quot;573-111-1111&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is XML:&lt;/p&gt;
&lt;pre class=&#34;xml&#34;&gt;&lt;code&gt;&amp;lt;order&amp;gt;
    &amp;lt;crust&amp;gt;original&amp;lt;/crust&amp;gt;
    &amp;lt;toppings&amp;gt;
        &amp;lt;topping&amp;gt;cheese&amp;lt;/topping&amp;gt;
        &amp;lt;topping&amp;gt;pepperoni&amp;lt;/topping&amp;gt;
        &amp;lt;topping&amp;gt;garlic&amp;lt;/topping&amp;gt;
    &amp;lt;/toppings&amp;gt;
    &amp;lt;status&amp;gt;cooking&amp;lt;/status&amp;gt;
&amp;lt;/order&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and finally, &lt;em&gt;Y&lt;/em&gt;et &lt;em&gt;A&lt;/em&gt;nother &lt;em&gt;M&lt;/em&gt;arkup &lt;em&gt;L&lt;/em&gt;anguage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;order:
  - crust: original
     topping: 
        - cheese
        - pepperoni
        - garlic&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-classic-approach-the-ecological-metadata-language-eml&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;the classic approach: the Ecological Metadata Language (&lt;code&gt;EML&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;EML is a classic metadata approach. There is a &lt;a href=&#34;http://im.lternet.edu/sites/im.lternet.edu/files/emlHandbook.pdf&#34;&gt;large amount of documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See also the resources &lt;a href=&#34;https://ropensci.github.io/EML/&#34;&gt;here on the development website&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;devtools::install_github(&amp;quot;ropensci/EML&amp;quot;, build_vignettes = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat &amp;lt;- data.frame(river = factor(c(&amp;quot;SAC&amp;quot;,  
                                   &amp;quot;SAC&amp;quot;,   
                                   &amp;quot;AM&amp;quot;)),
                  spp   = c(&amp;quot;Oncorhynchus tshawytscha&amp;quot;,  
                            &amp;quot;Oncorhynchus tshawytscha&amp;quot;, 
                            &amp;quot;Oncorhynchus kisutch&amp;quot;),
                  stg   = ordered(c(&amp;quot;smolt&amp;quot;, 
                                    &amp;quot;parr&amp;quot;, 
                                    &amp;quot;smolt&amp;quot;), 
                                  levels=c(&amp;quot;parr&amp;quot;, 
                                           &amp;quot;smolt&amp;quot;)), # =&amp;gt; parr &amp;lt; smolt
                  ct    = c(293L,    
                            410L,    
                            210L),
                  day   = as.Date(c(&amp;quot;2013-09-01&amp;quot;, 
                                    &amp;quot;2013-09-1&amp;quot;, 
                                    &amp;quot;2013-09-02&amp;quot;)),
                  stringsAsFactors = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we define the column units:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;col.defs &amp;lt;- c(&amp;quot;River site used for collection&amp;quot;,
              &amp;quot;Species scientific name&amp;quot;,
              &amp;quot;Life Stage&amp;quot;, 
              &amp;quot;count of live fish in traps&amp;quot;,
              &amp;quot;The day on which traps were sampled&amp;quot;)


unit.defs &amp;lt;- list(
  c(SAC = &amp;quot;The Sacramento River&amp;quot;,     # Factor 
    AM = &amp;quot;The American River&amp;quot;),
 &amp;quot;Scientific name&amp;quot;,                   # Character string 
  c(parr = &amp;quot;third life stage&amp;quot;,        # Ordered factor 
    smolt = &amp;quot;fourth life stage&amp;quot;),
  c(unit = &amp;quot;number&amp;quot;, 
    precision = 1, 
    bounds = c(0, Inf)),              # Integer
  c(format = &amp;quot;YYYY-MM-DD&amp;quot;,            # Date
    precision = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, we write it out:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eml_write(dat, 
          col.defs = col.defs, 
          unit.defs = unit.defs, 
          creator = &amp;quot;Carl Boettiger &amp;lt;cboettig@ropensci.org&amp;gt;&amp;quot;, 
          file = &amp;quot;EML_example.xml&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-the-computer-to-write-it-csvy&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;get the computer to write it: &lt;code&gt;CSVY&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;CSVY is a new idea, that embeds the metadata file into the very &lt;code&gt;.csv&lt;/code&gt; file. The whole idea is described on &lt;a href=&#34;http://csvy.org/&#34;&gt;csvy.org&lt;/a&gt;. It uses a metadata standard called &lt;code&gt;YAML&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
name: my-dataset
fields:
  - name: var1
    title: variable 1
    type: string
    description: explaining var1
    constraints:
      - required: true
  - name: var2
    title: variable 2
    type: integer
  - name: var3
    title: variable 3
    type: number
---
var1,var2,var3
A,1,2.5
B,3,4.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re going to focus on this process, (but not on the constraints)&lt;/p&gt;
&lt;p&gt;Let’s start by using &lt;code&gt;rio&lt;/code&gt; to write the data out:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rio)

attributes(gapminder)[1:2]

export(gapminder, &amp;quot;gapminder.csvy&amp;quot;, format = &amp;quot;csvy&amp;quot;, comment_header = FALSE)

head(import(&amp;quot;gapminder.csvy&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now let’s edit it by hand.&lt;/p&gt;
&lt;div id=&#34;note-the-json-table-schema&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Note: the JSON table schema&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; field     field
   |         |
   |         |
   V         V
 
  A     |    B    |    C    |    D      &amp;lt;--- Row
  ------------------------------------
  valA  |   valB  |  valC   |   valD    &amp;lt;--- Row
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re going to work with &lt;strong&gt;field descriptors&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;json&#34;&gt;&lt;code&gt;  &amp;quot;name&amp;quot;: &amp;quot;name of field (e.g. column name)&amp;quot;,
  &amp;quot;title&amp;quot;: &amp;quot;A nicer human readable label or title for the field&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;A string specifying the type&amp;quot;,
  &amp;quot;format&amp;quot;: &amp;quot;A string specifying a format&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;A description for the field&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that there are no quotes when we use YAML.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;datapackage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;datapackage&lt;/h2&gt;
&lt;p&gt;Using the R package &lt;a href=&#34;https://github.com/christophergandrud/dpmr&#34;&gt;&lt;code&gt;dmpr&lt;/code&gt;&lt;/a&gt;. It creates data packages after the standard described in &lt;a href=&#34;http://data.okfn.org/doc/tabular-data-package&#34;&gt;datapackage&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.package(&amp;quot;dpmr&amp;quot;)

library(dpmr)
meta_list &amp;lt;- list(name = &amp;#39;gapminder_data&amp;#39;,
                    title = &amp;#39;the data of Gapminder&amp;#39;,
                    last_updated = Sys.Date(),
                    version = &amp;#39;0.1&amp;#39;,
                    license = data.frame(type = &amp;#39;PDDL-1.0&amp;#39;,
                            url = &amp;#39;http://opendatacommons.org/licenses/pddl/&amp;#39;)
                            )

datapackage_init(df = gapminder, meta = meta_list) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ands.org.au/guides/metadata-working.html&#34;&gt;Metadata Guide&lt;/a&gt; from Australian National Data Service (ANDS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rd-alliance.github.io/metadata-directory/&#34;&gt;Metadata Directory&lt;/a&gt; from Research Data Alliance&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dataone.org/sites/all/documents/DataONE_BP_Primer_020212.pdf&#34;&gt;Best Practices for Data Management&lt;/a&gt; from DataONE&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003542&#34;&gt;Ten Simple Rules for the Care and Feeding of Scientific Data&lt;/a&gt; by Goodman et al&lt;/li&gt;
&lt;li&gt;[Challenges to Open Data and How to Respond] (04c_OpenDataChallengesQuickInfoSheet.md)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Assertions in R</title>
      <link>/page/06_assert/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/page/06_assert/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;hey-are-you-sure-about-that-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;“Hey, are you sure about that data”&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-for-today&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Outline for today&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Review of the Homework – any interesting challenges or questions?&lt;/li&gt;
&lt;li&gt;an &lt;a href=&#34;assert.html&#34;&gt;Introduction to &lt;code&gt;assertr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Outline of the &lt;a href=&#34;http://biol548o.github.io/PeerReview_2&#34;&gt;Peer Review 2 process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;You’ve recently obtained some data. How can you tell if it is correct? What if you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;many datasets&lt;/li&gt;
&lt;li&gt;Data produced by many collaborators&lt;/li&gt;
&lt;li&gt;Data from a past project in your lab (“#otherpeoplesdata”)&lt;/li&gt;
&lt;li&gt;meta-analysis datasets&lt;/li&gt;
&lt;li&gt;Internet data, from an API or from scraping&lt;/li&gt;
&lt;li&gt;data from a particularly &lt;em&gt;experimental&lt;/em&gt; simulation?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How can you tell if the numbers you have make any sense?&lt;/p&gt;
&lt;p&gt;We’ll try out the practice of asserting data by using the gapminder dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gapminder)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we’ll be using an R package specifically designed to work with data assertions: &lt;code&gt;assertr&lt;/code&gt;, by Tony Fischetti (&lt;a href=&#34;https://github.com/tonyfischetti/assertr&#34;&gt;github page&lt;/a&gt; and &lt;a href=&#34;https://vimeo.com/141906295&#34;&gt;rOpenSci community call with Tony&lt;/a&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;assertr&amp;quot;)
# devtools::
library(assertr)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;what-do-we-know-about-the-dataset&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What do we know about the dataset&lt;/h2&gt;
&lt;p&gt;The first step in checking whether we have a problem in a dataset is to try to think of what reasonable properties of the data &lt;em&gt;should&lt;/em&gt; be.&lt;/p&gt;
&lt;p&gt;Let’s begin by looking at the top of gapminder:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(head(gapminder))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;country&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;continent&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lifeExp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;pop&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gdpPercap&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Afghanistan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Asia&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1952&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.801&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8425333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;779.4453&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Afghanistan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Asia&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1957&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30.332&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9240934&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;820.8530&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Afghanistan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Asia&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1962&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31.997&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10267083&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;853.1007&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Afghanistan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Asia&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1967&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;34.020&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11537966&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;836.1971&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Afghanistan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Asia&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1972&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36.088&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13079460&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;739.9811&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Afghanistan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Asia&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1977&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;38.438&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14880372&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;786.1134&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;country&lt;/code&gt;: should probably be a country that exists in the world. Any additions to gapminder should contain the same countries, spelt the same way.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continent&lt;/code&gt;: similarly, there are only five continents (Asia, Europe, Africa, Americas, Oceania) and any new data should match those.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lifeExp&lt;/code&gt;: must always be a positive real number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop&lt;/code&gt;: always a positive integer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gdpPercap&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;data-checking-in-base-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data checking in base R&lt;/h2&gt;
&lt;p&gt;What base R functions exist for checking the same thing?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopifnot(gapminder$lifeExp &amp;gt; 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;perfectly good way to test data! However, not perfectly flexible, and rather difficult to chain:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magrittr)

gapminder %&amp;gt;% 
  {stopifnot(.[[&amp;quot;lifExp&amp;quot;]] &amp;gt; 0);stopifnot(.[[&amp;quot;pop&amp;quot;]] &amp;gt; 0)}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;.. that’s rather awkward.&lt;/p&gt;
&lt;p&gt;Fortunately, we have &lt;code&gt;assertr&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Assertr gives us several functions. They take the dataset as the first argument (perfect for piping) and run a test on it. If it fails, the function causes an error. If everything is OK, they return the dataset so that it can be piped to a new test (or into an analysis)&lt;/p&gt;
&lt;div id=&#34;verify&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;verify&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The most straightforward function in assertr is &lt;code&gt;verify()&lt;/code&gt;. It evaluates a logical expression (&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; etc) using a data frame. That lets us check some general properties of a dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gm &amp;lt;- gapminder %&amp;gt;% 
  verify(nrow(.) == 1704) %&amp;gt;% 
  verify(ncol(.) == 6) %&amp;gt;% 
  verify(is.factor(.$continent)) %&amp;gt;% 
  verify(length(levels(.$continent)) == 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far so good! While this is good for checking the dataset at a coarse level, it doesn’t tell us &lt;em&gt;where&lt;/em&gt; the unusual numbers are:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# gapminder %&amp;gt;% 
#   verify(lifeExp &amp;gt; 30)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;assert&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;assert&lt;/code&gt; evaluates a &lt;em&gt;predicate function&lt;/em&gt; on a column of a dataset, and indentifies where the predicate returns &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a predicate function is any function that will give you &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt; for every element in a vector. &lt;code&gt;is.na()&lt;/code&gt; is a common example.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, we can’t write &lt;code&gt;pop &amp;gt; 0&lt;/code&gt;, we need to write this in terms of a function. Fortunately, &lt;code&gt;assertr&lt;/code&gt; supplies some flexible predicates for us:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gm2 &amp;lt;- gapminder %&amp;gt;% 
  assert(within_bounds(0,Inf), pop)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;assert-has-the-power-of-dplyrselect&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;assert&lt;/code&gt; has the Power of &lt;code&gt;dplyr::select&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;You can use the same syntax that you are familiar with from &lt;code&gt;dplyr&lt;/code&gt; to select columns in &lt;code&gt;assertr&lt;/code&gt;. That means less typing!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gm2 &amp;lt;- gapminder %&amp;gt;% 
  assert(within_bounds(0, Inf), lifeExp:gdpPercap)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s meet the other handy predicates:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## let us have a vector of all continents
all_continents &amp;lt;- levels(gapminder$continent)
all_continents&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Africa&amp;quot;   &amp;quot;Americas&amp;quot; &amp;quot;Asia&amp;quot;     &amp;quot;Europe&amp;quot;   &amp;quot;Oceania&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gm2 &amp;lt;- gapminder %&amp;gt;% 
  ## check for missing values
  assert(not_na, country:gdpPercap) %&amp;gt;% 
  ## check that all continents are matching
  assert(in_set(all_continents), continent) %&amp;gt;% 
  assert(within_bounds(0, Inf), lifeExp:gdpPercap)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also cook up our own predicate:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is_factor &amp;lt;- function(x) is.factor(x)

gm_fac &amp;lt;- gapminder %&amp;gt;% 
  assert(is_factor, country, continent)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;challenge&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;challenge!&lt;/h3&gt;
&lt;p&gt;write a function to test if any numbers in population have a decimal place.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;final-exercise&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;final exercise&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Announcement: some new 2016 data has been recorded for gapminder!&lt;/em&gt;&lt;br /&gt;
Let’s check this data before we combine it with the official dataset:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: write down some assertions which pass for all of gapminder&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: download &lt;a href=&#34;supporting_info/gapminder_2016.csv&#34;&gt;this file&lt;/a&gt; and see if you can find all the errors!&lt;/p&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/page/01_shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/01_shell/</guid>
      <description>

&lt;h3 id=&#34;what-is-the-shell&#34;&gt;What is the Shell?&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;shell&lt;/code&gt; (or &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;terminal&lt;/code&gt;) is a program on your computer whose job is to run other programs, rather than do calculations itself. The &lt;code&gt;shell&lt;/code&gt; is a very old program and in a time before the mouse it was the only way to interact with a computer. It is still extremely popular among programmers because it is very powerful, fast, and is particularly powerful at automating repetitive tasks.&lt;/p&gt;

&lt;p&gt;Here we use the &lt;code&gt;shell&lt;/code&gt; for a more modest goal: To navigate the file system, confirm the present working directory, and cement the &lt;code&gt;git&lt;/code&gt; to &lt;code&gt;GitHub&lt;/code&gt; connection.&lt;/p&gt;

&lt;h3 id=&#34;starting-the-shell&#34;&gt;Starting the shell&lt;/h3&gt;

&lt;p&gt;In RStudio, go to &lt;em&gt;Tools &amp;gt; Shell&lt;/em&gt;. This should take you to the shell (on Mac: Terminal, on Windows: GitBash or equivalent). It should be a simple blinking cursor, waiting for input and looks similar to this (white text on black background, or black text on white background):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Bash_screenshot.png/440px-Bash_screenshot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;using-the-shell&#34;&gt;Using the shell&lt;/h3&gt;

&lt;p&gt;The most basic commands are listed below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pwd&#34;&gt;&lt;code&gt;pwd&lt;/code&gt;&lt;/a&gt; (&lt;strong&gt;p&lt;/strong&gt;rint &lt;strong&gt;w&lt;/strong&gt;orking &lt;strong&gt;d&lt;/strong&gt;irectory). Shows the folder (or directory) you are currently operating in. This is not necessarily the same as the &lt;code&gt;R&lt;/code&gt; working directory you get from &lt;code&gt;getwd()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Ls&#34;&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/a&gt; (&lt;strong&gt;l&lt;/strong&gt;i&lt;strong&gt;s&lt;/strong&gt;t all files). Shows all files in the current working directory. This is equivalent to looking at the files in your Finder/Explorer/File Manager. Use &lt;code&gt;ls -a&lt;/code&gt; to also list hidden files, such as &lt;code&gt;.Rhistory&lt;/code&gt; and &lt;code&gt;.git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cd_(command)&#34;&gt;&lt;code&gt;cd&lt;/code&gt;&lt;/a&gt; (&lt;strong&gt;c&lt;/strong&gt;hange &lt;strong&gt;d&lt;/strong&gt;irectory). Allows you to navigate through your folders by changing the shell&amp;rsquo;s working directory. You can navigate like so:&lt;/li&gt;
&lt;li&gt;go to subfolder &lt;code&gt;foo&lt;/code&gt; of current working directory: &lt;code&gt;cd foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to parent folder of current working directory: &lt;code&gt;cd ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to home folder: &lt;a href=&#34;http://tilde.club/~ford/tildepoint.jpg&#34;&gt;&lt;code&gt;cd ~&lt;/code&gt;&lt;/a&gt; or simply &lt;code&gt;cd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to folder using absolute path, works regardless of your current working directory: &lt;code&gt;cd /home/my_username/Desktop&lt;/code&gt;. Windows uses a slightly different syntax with the slashes between the folder names reversed, &lt;code&gt;\&lt;/code&gt;, e.g. &lt;code&gt;cd C:\Users\MY_USERNAME\Desktop&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pro tip 1: Dragging and dropping a file or folder into the terminal window will paste the absolute path into the window.&lt;/li&gt;
&lt;li&gt;Pro tip 2: Use the &lt;code&gt;tab&lt;/code&gt; key to autocomplete unambiguous folder and file names. Hit &lt;code&gt;tab&lt;/code&gt; twice to see all ambiguous options.&lt;/li&gt;
&lt;li&gt;Use arrow-up and arrow-down to repeat previous commands. Or search for previous commands with &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;r&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt; is the most used git command and informs you of your current branch,  any changes or untracked files, and whether you are in sync with your remotes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt; lists all remotes. Very useful for making sure &lt;code&gt;git&lt;/code&gt; knows about your remote and that the remote address is correct.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add origin GITHUB_URL&lt;/code&gt; adds the remote &lt;code&gt;GITHUB_URL&lt;/code&gt; with nickname &lt;code&gt;origin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote set-url origin GITHUB_URL&lt;/code&gt; changes the remote url of &lt;code&gt;origin&lt;/code&gt; to &lt;code&gt;GITHUB_URL&lt;/code&gt;. This way you can fix typos in the remote url.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go back to the &lt;a href=&#34;git00_index.html&#34;&gt;index for the all the Git stuff&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/page/04_reading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/04_reading/</guid>
      <description>

&lt;h2 id=&#34;reading-in-data&#34;&gt;reading in data&lt;/h2&gt;

&lt;p&gt;If you have spreadsheet-based data, the two easiest ways to read in data are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;read directly from excel&lt;/li&gt;
&lt;li&gt;read from a csv file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I suggest you choose the first option if you want to keep your .xls file (e.g. perhaps you are not able to capture &lt;strong&gt;all&lt;/strong&gt; the information with a CSV.) This might happen if not all the data in your excel file &lt;em&gt;can&lt;/em&gt; be represented in a CSV &amp;ndash; for example, you might have some data represented not as values in a cell, but as the colour of the cell.&lt;/p&gt;

&lt;p&gt;Here is an example of reading in an excel file (from the &lt;a href=&#34;https://github.com/BIOL548O/lecture_4_exercises/&#34;&gt;lecture_4_exercises&lt;/a&gt; repo):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(readxl)

germin &amp;lt;- readxl::read_excel(&amp;quot;data-raw/Schiz germination record.xlsx&amp;quot;, sheet = 2)
head(germin)
View(germin)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;reading-in-a-csv&#34;&gt;reading in a csv&lt;/h3&gt;

&lt;p&gt;You may be familiar with the base functions &lt;code&gt;read.csv&lt;/code&gt; and &lt;code&gt;read.delim&lt;/code&gt;. These are flexible, handy functions. However it has been my experience that, especially with &amp;ldquo;untidy&amp;rdquo; data, there are advantages to using a more modern version of the same functions, from the package &lt;code&gt;readr&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;read_csv(&amp;quot;data/gapminder_wide.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;readr::read_csv&lt;/code&gt; has several useful behaviours: it never creates factors (it leaves text as text) and it doesn&amp;rsquo;t add rownames. It also doesn&amp;rsquo;t complain if you give it unconventional column names. I find that all of these traits come in handy when the data needs to be reorganized. Read more about readr &lt;a href=&#34;https://github.com/tidyverse/readr&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;writing-out-data&#34;&gt;Writing out data&lt;/h2&gt;

&lt;p&gt;Write your data out to a clean and tidy CSV in in your &lt;code&gt;data/&lt;/code&gt; folder. Again, I find that using &lt;code&gt;write_csv&lt;/code&gt; from the &lt;code&gt;readr&lt;/code&gt; package makes things simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(readr)
write_csv(germin, path = &amp;quot;data/germin.csv&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-word-about-relative-paths&#34;&gt;A word about relative paths&lt;/h2&gt;

&lt;p&gt;Note that in the above R scripts, I was reading an writing files using &amp;ldquo;relative paths&amp;rdquo;. This means that you write the name of the folder(s) containing the file you want before the filename itself, separated with a &lt;code&gt;/&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data/file_name_of_data.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will work automatically if your Rstudio project is set up the way we discussed: with a &lt;code&gt;data/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Why don&amp;rsquo;t you have to write the complete path? Something like (for a Mac) &lt;code&gt;/Users/amacdonald/Documents/Projects/BIOL548O/BIOL548O.github.io&lt;/code&gt; or on a PC &lt;code&gt;c:\\amacdonald\Desktop\files\thesis_chapter\&lt;/code&gt; etc? Both of these paths start at the &amp;ldquo;home folder&amp;rdquo; of your computer. But if we are working in an Rstudio project, such precision is not necessary. All we need to do is direct the computer to the &lt;code&gt;data&lt;/code&gt; folder in &lt;em&gt;this&lt;/em&gt; project.&lt;/p&gt;

&lt;p&gt;One way to think of relative paths is to read them as saying: &amp;ldquo;from here, go into the data folder&amp;rdquo;, where &amp;ldquo;here&amp;rdquo; is assumed to be your project folder (i.e., wherever your &lt;code&gt;.Rproj&lt;/code&gt; file lives).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/page/07_eml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/07_eml/</guid>
      <description>/BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;ecological-metadata-language&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ecological metadata language&lt;/h3&gt;
&lt;p&gt;Ecological Metadata Language is a very rigorous, and very complete, format for writing metadata. Because it is more specialized than the other two formats we have considered. As a result there is definitely more to know. But i think the effort is worth it, for two reasons.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Because it is so specific to ecological/environmental applications, you can be very explicit about your metadata&lt;/li&gt;
&lt;li&gt;Because it is supported by the &lt;a href=&#34;https://knb.ecoinformatics.org/&#34;&gt;Knowledge Network for Biocomplexity&lt;/a&gt; which will host your data for free if it is documented this way.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-eml&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;writing EML&lt;/h2&gt;
&lt;p&gt;There are at least two ways of writing metadata. One is via &lt;a href=&#34;https://knb.ecoinformatics.org/#tools&#34;&gt;Morpho&lt;/a&gt; which is a Java-based application. To run this, you will need Java installed on your machine. Another way is via R, which is the means that we will use (because I am sure that we all already have R installed!)&lt;/p&gt;
&lt;p&gt;We will use the R package &lt;code&gt;EML&lt;/code&gt;. See the &lt;a href=&#34;https://ropensci.github.io/EML/&#34;&gt;ROpenSci tutorial here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;ropensci/EML&amp;quot;)
library(EML)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;components-of-eml&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Components of EML&lt;/h2&gt;
&lt;p&gt;EML is based on XML, and therefore has a nested structure. This is useful, because nested information is useful for describing a dataset. For example, if you have a column in your dataset that represents a factor (e.g. the factor “Nutrient addition”) this factor may contain several levels (e.g. “low” “medium” and “high”).&lt;/p&gt;
&lt;p&gt;However, the nested structure of EML also imposes a small cost – it can be a little fiddley to set up. I think it might be helpful to divide the task up into some key components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;dataTable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the contact information&lt;/li&gt;
&lt;li&gt;coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;the-datatable&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;the &lt;code&gt;dataTable&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This part of the metadata is the most involved, so I am subdividitng this part into two halves:&lt;/p&gt;
&lt;div id=&#34;attributes&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;attributes&lt;/h4&gt;
&lt;p&gt;This is a dataframe that contains &lt;strong&gt;one row per column in the &lt;code&gt;.csv&lt;/code&gt;&lt;/strong&gt; file. In other words, imagine the &lt;code&gt;.csv&lt;/code&gt; file you are documenting as being &lt;em&gt;sideways&lt;/em&gt;, and give each column a row in this new dataframe.&lt;/p&gt;
&lt;p&gt;IN this example I am going to use a function from &lt;code&gt;dplyr&lt;/code&gt; which you might not have seen, so I will describe it in a bit more detail. Normally, we create a data.frame in R in one of two ways: by reading a file directly in (e.g. via &lt;code&gt;read.csv&lt;/code&gt;) and&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(EML)
library(gapminder)


# attributes --------------------------------------------------------------

attributes &amp;lt;- frame_data(
  ~attributeName, ~formatString,  ~definition       ,  ~unit, ~numberType, ~attributeDefinition,
  &amp;quot;country&amp;quot;     ,            NA,           &amp;quot;country&amp;quot;,     NA,          NA,  &amp;quot;name of country&amp;quot;,
  &amp;quot;continent&amp;quot;   ,            NA,         &amp;quot;continent&amp;quot;,     NA,          NA,  &amp;quot;name of continent&amp;quot;,
  &amp;quot;year&amp;quot;        ,        &amp;quot;YYYY&amp;quot;,                  NA,     NA,          NA,  &amp;quot;year of sample&amp;quot;,
  &amp;quot;lifeExp&amp;quot;     ,            NA,                  NA,     &amp;quot;number&amp;quot;,   &amp;quot;real&amp;quot;,  &amp;quot;life expentency at birth&amp;quot;,
  &amp;quot;pop&amp;quot;         ,            NA,                  NA,     &amp;quot;number&amp;quot;,   &amp;quot;real&amp;quot;,  &amp;quot;total population&amp;quot;,
  &amp;quot;gdpPercap&amp;quot;   ,            NA,                  NA,     &amp;quot;number&amp;quot;,   &amp;quot;real&amp;quot;,  &amp;quot;GDP per capita&amp;quot;
) &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;physical&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;physical&lt;/h4&gt;
&lt;p&gt;This is the physical file to which the attributes are referring&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/page/08_next_time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/08_next_time/</guid>
      <description>

&lt;h3 id=&#34;your-next-data-project&#34;&gt;your next data project&lt;/h3&gt;

&lt;p&gt;what practices should you keep in mind for your next data project?&lt;/p&gt;

&lt;p&gt;Research ethics &amp;ndash; preregistered studies&lt;/p&gt;

&lt;p&gt;data management plan &amp;ndash; DMPtool from DataOne&lt;/p&gt;

&lt;p&gt;thinking about analysis early &amp;ndash; thinking about the format of the dataset.&lt;/p&gt;

&lt;p&gt;how will you collect the data?
field notebooks &amp;ndash; data forms &amp;ndash; very handy (photograph Micah&amp;rsquo;s?)
googlesheets demo &amp;ndash; and google form demo
Make a google form, show how simple validation can be used&lt;/p&gt;

&lt;h2 id=&#34;validation-the-earliest-assertion&#34;&gt;validation &amp;ndash; the earliest assertion&lt;/h2&gt;

&lt;p&gt;Assertions are useful, and in your life you will certainly have to use data created by others &amp;ndash; in times like that, a little bit of assertion can go a long way. When you are working with data taht is changing, that is still coming in, you will have a lot of assertions which you will need to constantly check. When something fails, think about &amp;ldquo;what assertion might have prevented this failure&amp;rdquo; and add that. I mean when something goes wrong at a later stange in th&lt;/p&gt;

&lt;p&gt;But at the same time, you need to be interested in&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/page/csvy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/csvy/</guid>
      <description>&lt;p&gt;Write csvy&lt;/p&gt;

&lt;p&gt;Writing CSVY has just a few steps. Here are some
)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/page/exercises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/exercises/</guid>
      <description>

&lt;h1 id=&#34;exercises-for-lecture-4&#34;&gt;Exercises for lecture 4&lt;/h1&gt;

&lt;p&gt;In this class we are going to spend some time practicing using dplyr and
tidyr&lt;/p&gt;

&lt;p&gt;We begin by loading &lt;code&gt;gapminder&lt;/code&gt; and the &lt;code&gt;tidyverse&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(gapminder)
library(tidyverse)

## Loading tidyverse: ggplot2
## Loading tidyverse: tibble
## Loading tidyverse: tidyr
## Loading tidyverse: readr
## Loading tidyverse: purrr
## Loading tidyverse: dplyr

## Conflicts with tidy packages ----------------------------------------------

## filter(): dplyr, stats
## lag():    dplyr, stats
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if you cannot load &lt;code&gt;tidyverse&lt;/code&gt;, please try loading just &lt;code&gt;dplyr&lt;/code&gt; and
&lt;code&gt;tidyr&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;challenge-1&#34;&gt;Challenge 1&lt;/h2&gt;

&lt;p&gt;calculate the mean life expectancy, population, and gdpPercap for each
continent. Hint: use the group_by() and summarize() functions we
learned in the dplyr lesson&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gapminder %&amp;gt;% 
  group_by(continent) %&amp;gt;% 
  summarize(mean_life = mean(lifeExp),
            meanpop   = mean(pop),
            meanGDP   = mean(gdpPercap))

## # A tibble: 5 × 4
##   continent mean_life  meanpop   meanGDP
##      &amp;lt;fctr&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1    Africa  48.86533  9916003  2193.755
## 2  Americas  64.65874 24504795  7136.110
## 3      Asia  60.06490 77038722  7902.150
## 4    Europe  71.90369 17169765 14469.476
## 5   Oceania  74.32621  8874672 18621.609
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;challenge-1h-1&#34;&gt;Challenge 1h.1&lt;/h3&gt;

&lt;p&gt;Rewrite the code above, but this time try using &lt;code&gt;tidyr::gather()&lt;/code&gt;. HINT:
First, gather all of the variables (lifeExp, pop and gdpPercap) into a
new column called &amp;ldquo;variable_name&amp;rdquo;. Then, group by both continent and
variable_name&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gapminder %&amp;gt;% 
  gather(key = &amp;quot;variable&amp;quot;, value = &amp;quot;value&amp;quot;, lifeExp:gdpPercap) %&amp;gt;% 
  group_by(continent, variable) %&amp;gt;% 
  summarize(mean_value = mean(value))

## Source: local data frame [15 x 3]
## Groups: continent [?]
## 
##    continent  variable   mean_value
##       &amp;lt;fctr&amp;gt;     &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;
## 1     Africa gdpPercap 2.193755e+03
## 2     Africa   lifeExp 4.886533e+01
## 3     Africa       pop 9.916003e+06
## 4   Americas gdpPercap 7.136110e+03
## 5   Americas   lifeExp 6.465874e+01
## 6   Americas       pop 2.450479e+07
## 7       Asia gdpPercap 7.902150e+03
## 8       Asia   lifeExp 6.006490e+01
## 9       Asia       pop 7.703872e+07
## 10    Europe gdpPercap 1.446948e+04
## 11    Europe   lifeExp 7.190369e+01
## 12    Europe       pop 1.716976e+07
## 13   Oceania gdpPercap 1.862161e+04
## 14   Oceania   lifeExp 7.432621e+01
## 15   Oceania       pop 8.874672e+06
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;challenge-1h-2&#34;&gt;Challenge 1h.2&lt;/h3&gt;

&lt;p&gt;Rewrite the code above, using &lt;code&gt;summarize_each&lt;/code&gt; and/or &lt;code&gt;summarize_all&lt;/code&gt;.
To do so you might want to read the help file: &lt;code&gt;?summarize_each&lt;/code&gt; ###
Challenge 2.1&lt;/p&gt;

&lt;p&gt;Begin by reading in a &amp;ldquo;wide&amp;rdquo; version of the dataset&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gap_wide &amp;lt;- read.csv(&amp;quot;data/gapminder_wide.csv&amp;quot;, stringsAsFactors = FALSE)
str(gap_wide)

## &#39;data.frame&#39;:    142 obs. of  38 variables:
##  $ continent     : chr  &amp;quot;Africa&amp;quot; &amp;quot;Africa&amp;quot; &amp;quot;Africa&amp;quot; &amp;quot;Africa&amp;quot; ...
##  $ country       : chr  &amp;quot;Algeria&amp;quot; &amp;quot;Angola&amp;quot; &amp;quot;Benin&amp;quot; &amp;quot;Botswana&amp;quot; ...
##  $ gdpPercap_1952: num  2449 3521 1063 851 543 ...
##  $ gdpPercap_1957: num  3014 3828 960 918 617 ...
##  $ gdpPercap_1962: num  2551 4269 949 984 723 ...
##  $ gdpPercap_1967: num  3247 5523 1036 1215 795 ...
##  $ gdpPercap_1972: num  4183 5473 1086 2264 855 ...
##  $ gdpPercap_1977: num  4910 3009 1029 3215 743 ...
##  $ gdpPercap_1982: num  5745 2757 1278 4551 807 ...
##  $ gdpPercap_1987: num  5681 2430 1226 6206 912 ...
##  $ gdpPercap_1992: num  5023 2628 1191 7954 932 ...
##  $ gdpPercap_1997: num  4797 2277 1233 8647 946 ...
##  $ gdpPercap_2002: num  5288 2773 1373 11004 1038 ...
##  $ gdpPercap_2007: num  6223 4797 1441 12570 1217 ...
##  $ lifeExp_1952  : num  43.1 30 38.2 47.6 32 ...
##  $ lifeExp_1957  : num  45.7 32 40.4 49.6 34.9 ...
##  $ lifeExp_1962  : num  48.3 34 42.6 51.5 37.8 ...
##  $ lifeExp_1967  : num  51.4 36 44.9 53.3 40.7 ...
##  $ lifeExp_1972  : num  54.5 37.9 47 56 43.6 ...
##  $ lifeExp_1977  : num  58 39.5 49.2 59.3 46.1 ...
##  $ lifeExp_1982  : num  61.4 39.9 50.9 61.5 48.1 ...
##  $ lifeExp_1987  : num  65.8 39.9 52.3 63.6 49.6 ...
##  $ lifeExp_1992  : num  67.7 40.6 53.9 62.7 50.3 ...
##  $ lifeExp_1997  : num  69.2 41 54.8 52.6 50.3 ...
##  $ lifeExp_2002  : num  71 41 54.4 46.6 50.6 ...
##  $ lifeExp_2007  : num  72.3 42.7 56.7 50.7 52.3 ...
##  $ pop_1952      : num  9279525 4232095 1738315 442308 4469979 ...
##  $ pop_1957      : num  10270856 4561361 1925173 474639 4713416 ...
##  $ pop_1962      : num  11000948 4826015 2151895 512764 4919632 ...
##  $ pop_1967      : num  12760499 5247469 2427334 553541 5127935 ...
##  $ pop_1972      : num  14760787 5894858 2761407 619351 5433886 ...
##  $ pop_1977      : num  17152804 6162675 3168267 781472 5889574 ...
##  $ pop_1982      : num  20033753 7016384 3641603 970347 6634596 ...
##  $ pop_1987      : num  23254956 7874230 4243788 1151184 7586551 ...
##  $ pop_1992      : num  26298373 8735988 4981671 1342614 8878303 ...
##  $ pop_1997      : num  29072015 9875024 6066080 1536536 10352843 ...
##  $ pop_2002      : int  31287142 10866106 7026113 1630347 12251209 7021078 15929988 4048013 8835739 614382 ...
##  $ pop_2007      : int  33333216 12420476 8078314 1639131 14326203 8390505 17696293 4369038 10238807 710960 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is different about this organization of the dataset? What, if
anything, is &lt;em&gt;easier&lt;/em&gt; to do in this format? what would be harder?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gap_wide %&amp;gt;% 
  select(-continent, -country) %&amp;gt;% 
  colMeans

## gdpPercap_1952 gdpPercap_1957 gdpPercap_1962 gdpPercap_1967 gdpPercap_1972 
##   3.725276e+03   4.299408e+03   4.725812e+03   5.483653e+03   6.770083e+03 
## gdpPercap_1977 gdpPercap_1982 gdpPercap_1987 gdpPercap_1992 gdpPercap_1997 
##   7.313166e+03   7.518902e+03   7.900920e+03   8.158609e+03   9.090175e+03 
## gdpPercap_2002 gdpPercap_2007   lifeExp_1952   lifeExp_1957   lifeExp_1962 
##   9.917848e+03   1.168007e+04   4.905762e+01   5.150740e+01   5.360925e+01 
##   lifeExp_1967   lifeExp_1972   lifeExp_1977   lifeExp_1982   lifeExp_1987 
##   5.567829e+01   5.764739e+01   5.957016e+01   6.153320e+01   6.321261e+01 
##   lifeExp_1992   lifeExp_1997   lifeExp_2002   lifeExp_2007       pop_1952 
##   6.416034e+01   6.501468e+01   6.569492e+01   6.700742e+01   1.695040e+07 
##       pop_1957       pop_1962       pop_1967       pop_1972       pop_1977 
##   1.876341e+07   2.042101e+07   2.265830e+07   2.518998e+07   2.767638e+07 
##       pop_1982       pop_1987       pop_1992       pop_1997       pop_2002 
##   3.020730e+07   3.303857e+07   3.599092e+07   3.883947e+07   4.145759e+07 
##       pop_2007 
##   4.402122e+07
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;challenge-2-2&#34;&gt;Challenge 2.2&lt;/h3&gt;

&lt;p&gt;Reformat this data into &amp;ldquo;long&amp;rdquo; format, using &lt;code&gt;tidyr::gather&lt;/code&gt;. Your new
dataset should have four columns: * Continent * Country *
observation_type * observation_value&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gap_wide %&amp;gt;% 
  gather(key = &amp;quot;observation_type&amp;quot;, value = &amp;quot;observation_value&amp;quot;, 3:38) %&amp;gt;% 
  head

##   continent      country observation_type observation_value
## 1    Africa      Algeria   gdpPercap_1952         2449.0082
## 2    Africa       Angola   gdpPercap_1952         3520.6103
## 3    Africa        Benin   gdpPercap_1952         1062.7522
## 4    Africa     Botswana   gdpPercap_1952          851.2411
## 5    Africa Burkina Faso   gdpPercap_1952          543.2552
## 6    Africa      Burundi   gdpPercap_1952          339.2965

gap_wide %&amp;gt;% 
  gather(key = &amp;quot;observation_type&amp;quot;, value = &amp;quot;observation_value&amp;quot;, gdpPercap_1952:pop_2007) %&amp;gt;% 
  head

##   continent      country observation_type observation_value
## 1    Africa      Algeria   gdpPercap_1952         2449.0082
## 2    Africa       Angola   gdpPercap_1952         3520.6103
## 3    Africa        Benin   gdpPercap_1952         1062.7522
## 4    Africa     Botswana   gdpPercap_1952          851.2411
## 5    Africa Burkina Faso   gdpPercap_1952          543.2552
## 6    Africa      Burundi   gdpPercap_1952          339.2965

gap_wide %&amp;gt;% 
  gather(key = &amp;quot;observation_type&amp;quot;, value = &amp;quot;observation_value&amp;quot;, -continent, -country) %&amp;gt;% 
  head

##   continent      country observation_type observation_value
## 1    Africa      Algeria   gdpPercap_1952         2449.0082
## 2    Africa       Angola   gdpPercap_1952         3520.6103
## 3    Africa        Benin   gdpPercap_1952         1062.7522
## 4    Africa     Botswana   gdpPercap_1952          851.2411
## 5    Africa Burkina Faso   gdpPercap_1952          543.2552
## 6    Africa      Burundi   gdpPercap_1952          339.2965

gap_wide %&amp;gt;% 
  gather(key = &amp;quot;observation_type&amp;quot;, value = &amp;quot;observation_value&amp;quot;, -continent, -country) %&amp;gt;% 
  head

##   continent      country observation_type observation_value
## 1    Africa      Algeria   gdpPercap_1952         2449.0082
## 2    Africa       Angola   gdpPercap_1952         3520.6103
## 3    Africa        Benin   gdpPercap_1952         1062.7522
## 4    Africa     Botswana   gdpPercap_1952          851.2411
## 5    Africa Burkina Faso   gdpPercap_1952          543.2552
## 6    Africa      Burundi   gdpPercap_1952          339.2965
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;challenge-2-3&#34;&gt;Challenge 2.3&lt;/h3&gt;

&lt;p&gt;The variable &lt;code&gt;observation_type&lt;/code&gt; is really two variables combined
together. Use the function &lt;code&gt;separate&lt;/code&gt; to split these into different
values. You may want to consult &lt;code&gt;?separate()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gap_long_separated &amp;lt;- gap_wide %&amp;gt;% 
  gather(key = &amp;quot;variable_name&amp;quot;, value = &amp;quot;Value&amp;quot;, gdpPercap_1952:pop_2007) %&amp;gt;% 
  separate(variable_name, c(&amp;quot;variable&amp;quot;, &amp;quot;years&amp;quot;), sep = &amp;quot;_&amp;quot;)
head(gap_long_separated)

##   continent      country  variable years     Value
## 1    Africa      Algeria gdpPercap  1952 2449.0082
## 2    Africa       Angola gdpPercap  1952 3520.6103
## 3    Africa        Benin gdpPercap  1952 1062.7522
## 4    Africa     Botswana gdpPercap  1952  851.2411
## 5    Africa Burkina Faso gdpPercap  1952  543.2552
## 6    Africa      Burundi gdpPercap  1952  339.2965
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;challenge-2-4&#34;&gt;Challenge 2.4&lt;/h3&gt;

&lt;p&gt;Now, practice reversing this process &amp;ndash; i.e., combine two columns into
one &amp;ndash; using &lt;code&gt;tidyr::unite&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gap_long_separated %&amp;gt;% 
  unite(col = &amp;quot;new_variable&amp;quot;, country, years) %&amp;gt;% 
  head

##   continent      new_variable  variable     Value
## 1    Africa      Algeria_1952 gdpPercap 2449.0082
## 2    Africa       Angola_1952 gdpPercap 3520.6103
## 3    Africa        Benin_1952 gdpPercap 1062.7522
## 4    Africa     Botswana_1952 gdpPercap  851.2411
## 5    Africa Burkina Faso_1952 gdpPercap  543.2552
## 6    Africa      Burundi_1952 gdpPercap  339.2965
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;challenge-2h-1&#34;&gt;Challenge 2h.1&lt;/h3&gt;

&lt;p&gt;Take this 1 step further and create a gap_ludicrously_wide format data
by spreading over countries, year and the 3 metrics? Hint this new
dataframe should only have 5 rows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gap_long_separated %&amp;gt;% 
  unite(col = &amp;quot;new_variable&amp;quot;, country, years) %&amp;gt;% 
  head

##   continent      new_variable  variable     Value
## 1    Africa      Algeria_1952 gdpPercap 2449.0082
## 2    Africa       Angola_1952 gdpPercap 3520.6103
## 3    Africa        Benin_1952 gdpPercap 1062.7522
## 4    Africa     Botswana_1952 gdpPercap  851.2411
## 5    Africa Burkina Faso_1952 gdpPercap  543.2552
## 6    Africa      Burundi_1952 gdpPercap  339.2965
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;challenge-3-1&#34;&gt;Challenge 3.1&lt;/h3&gt;

&lt;p&gt;Calculate the average life expectancy per country. Which has the longest
average life expectancy and which has the shortest average life
expectancy? ### Challenge 3.1h&lt;/p&gt;

&lt;p&gt;Rank all the countries by their life expenctancy. Use one of the &amp;ldquo;window
functions&amp;rdquo; for calculating rank&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ranked_by_life &amp;lt;- gapminder %&amp;gt;% 
  group_by(country) %&amp;gt;% 
  summarise(meanlife = mean(lifeExp)) %&amp;gt;% 
  mutate(rank_life_exp = dense_rank(desc(meanlife)))

ranked_by_life %&amp;gt;% 
  filter(rank_life_exp %in% range(rank_life_exp))

## # A tibble: 2 × 3
##        country meanlife rank_life_exp
##         &amp;lt;fctr&amp;gt;    &amp;lt;dbl&amp;gt;         &amp;lt;int&amp;gt;
## 1      Iceland 76.51142             1
## 2 Sierra Leone 36.76917           142
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;data-cleaning&#34;&gt;Data cleaning!&lt;/h2&gt;

&lt;p&gt;Data are not always in good condition. We will talk about how to use
these same skills for cleaning data.
&lt;a href=&#34;http://www.zoology.ubc.ca/~krebs/downloads/monitor.xlsx&#34;&gt;http://www.zoology.ubc.ca/~krebs/downloads/monitor.xlsx&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/page/nextPRsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/nextPRsheet/</guid>
      <description>

&lt;p&gt;for this next peer review:&lt;/p&gt;

&lt;p&gt;copy and paste the following text into the box below this issue (i.e. reply to this issue)&lt;/p&gt;

&lt;p&gt;Take the following steps:&lt;/p&gt;

&lt;p&gt;Go to the repo you are supposed to review [could even provide link]&lt;/p&gt;

&lt;p&gt;Clone this repo to your own computer (quick reminder how to do that: click on the HTTPS clone url, then in Rstudio choose New Project &amp;gt; Existing Project &amp;gt; from Version Control &amp;gt; Git and paste in that link.)&lt;/p&gt;

&lt;p&gt;Replace the words &lt;code&gt;YOUR WORDS HERE&lt;/code&gt; with your own comments.&lt;/p&gt;

&lt;h2 id=&#34;organization&#34;&gt;organization&lt;/h2&gt;

&lt;p&gt;Did your reviewee follow the directory naming convention that we are using? Was it easy to find the data cleaning script?&lt;/p&gt;

&lt;p&gt;YOUR WORDS HERE&lt;/p&gt;

&lt;h2 id=&#34;reproducible&#34;&gt;reproducible&lt;/h2&gt;

&lt;p&gt;Open the data cleaning script and run it all, either by sourcing or by highlighting and click Run all&lt;/p&gt;

&lt;p&gt;What happened? Did the final data file recreate itself? Why or why not? What changes need to be made to the data cleaning code to allow it to run on your machine?&lt;/p&gt;

&lt;p&gt;YOUR WORDS HERE&lt;/p&gt;

&lt;h2 id=&#34;documented&#34;&gt;documented&lt;/h2&gt;

&lt;p&gt;Are the comments in the code readable? Are there any lines of code that appear without any description of what they are doing?&lt;/p&gt;

&lt;p&gt;YOUR WORDS HERE&lt;/p&gt;

&lt;h2 id=&#34;efficient&#34;&gt;efficient&lt;/h2&gt;

&lt;p&gt;What transformations or manipulations is your reviewee performing? Are any done with more code than is necessary? For example, are they using their own code to solve a problem that is already handled in &lt;code&gt;dplyr&lt;/code&gt; or &lt;code&gt;tidyr&lt;/code&gt;? &lt;strong&gt;suggest something they could do differently&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;tip: suggest new code to your reviewee by typing three backticks before and after your suggestion&lt;/em&gt;
&lt;em&gt;tip: linking to lines of code on github&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;YOUR WORDS HERE&lt;/p&gt;

&lt;h2 id=&#34;output-is-tidy&#34;&gt;output is tidy&lt;/h2&gt;

&lt;p&gt;Tidy data has one observation in each row, and one variable in each column. Does that appear to be true of your reviewee&amp;rsquo;s dataset? Is there another form you could suggest?&lt;/p&gt;

&lt;p&gt;YOUR WORDS HERE&lt;/p&gt;

&lt;h2 id=&#34;output-is-correct&#34;&gt;output is correct&lt;/h2&gt;

&lt;p&gt;check either on Github or via a real CSV validator.&lt;/p&gt;

&lt;p&gt;Finally, go to &lt;em&gt;this google form&lt;/em&gt; to submit your grade for this assignment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don&amp;rsquo;t forget to delete your colleagues project from your computer when you are done!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before Tuesday:&lt;/p&gt;

&lt;p&gt;*evaluate your *&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic Data Manipulation</title>
      <link>/page/tidyr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/tidyr/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;Many years ago, I was introduced to R by &lt;a href=&#34;http://camwebb.info/&#34;&gt;Cam Webb&lt;/a&gt;. At the time, his website contained a list of common data manipulations (original &lt;a href=&#34;http://camwebb.info/blog/2014-04-29/&#34;&gt;here&lt;/a&gt;). This list dated from Cam’s early experience with R, and contained the R-help mailing list responses to a series of data manipulations. For a long time, I kept this file as a handy reference. I printed it out. I recommended it to friends.&lt;/p&gt;
&lt;p&gt;Now I have been using R for years, and the state of the art has advanced considerably. Particulary, &lt;a href=&#34;https://github.com/hadley&#34;&gt;Hadley Wickham’s&lt;/a&gt; &lt;code&gt;tidyr&lt;/code&gt; and &lt;code&gt;dplyr&lt;/code&gt; packages have transformed the way most useRs manipulate their data. I decided that it would be interesting to revisit my favourite resource and try my hand at solving these problems with tools from these two packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr)
library(dplyr)

## I&amp;#39;m going to use a different package to make tables (so that the data look a bit better on the internet). If you want that package too, do this:
library(knitr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;note that this document refers to things like “group” and “stack” that are intended to be general names for these operations, and are &lt;strong&gt;NOT&lt;/strong&gt; references to functions or terms in R&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;group&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;GROUP&lt;/h2&gt;
&lt;p&gt;Turn this table (A):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;c1&lt;/th&gt;
&lt;th&gt;c2&lt;/th&gt;
&lt;th&gt;c3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;into this (B):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Group1&lt;/th&gt;
&lt;th&gt;Group2&lt;/th&gt;
&lt;th&gt;Nrows&lt;/th&gt;
&lt;th&gt;SumOfCol3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A &amp;lt;- data.frame(
       c1 = c(&amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;B&amp;#39;),
       c2 = c(&amp;#39;a&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;),
       c3 = c(1, 3, 1, 1, 2, 2, 1))

B &amp;lt;- A %&amp;gt;%
  group_by(c1,c2) %&amp;gt;%
  summarize(Nrows=n(),
            SumOfCol3=sum(c3))
kable(B)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;c1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;c2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Nrows&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SumOfCol3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;d&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;split&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;SPLIT&lt;/h2&gt;
&lt;p&gt;Turn col3 of the second table (B) into this (C):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;row&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;d&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Many original responders suggested the use of &lt;code&gt;table&lt;/code&gt;, referring to the original dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;C_alt &amp;lt;- with(A,table(c1,c2))
kable(C_alt)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;a&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;b&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;d&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;a&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;b&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;d&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;although that solution is not &lt;a href=&#34;http://vita.had.co.nz/papers/tidy-data.pdf&#34;&gt;“tidy” in the Hadlian sense&lt;/a&gt; – i.e., it does not return a &lt;code&gt;data.frame&lt;/code&gt;, but rather a &lt;code&gt;table&lt;/code&gt; object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(C_alt)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;table&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can obtain a data.frame with &lt;code&gt;tidyr::spread()&lt;/code&gt; directly:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;C &amp;lt;- B %&amp;gt;%
  select(-Nrows) %&amp;gt;% 
  spread(c2, SumOfCol3) 

kable(C)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;c1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;a&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;b&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;d&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;stack&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;STACK&lt;/h2&gt;
&lt;p&gt;Turn the above table (C) into this (D):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;c1&lt;/th&gt;
&lt;th&gt;V1&lt;/th&gt;
&lt;th&gt;V2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;C %&amp;gt;% 
  gather(V1, V2, a:d) %&amp;gt;% 
  arrange(c1, V1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [8 x 3]
## Groups: c1 [2]
## 
##       c1    V1    V2
##   &amp;lt;fctr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1      A     a     5
## 2      A     b     3
## 3      A     c    NA
## 4      A     d    NA
## 5      B     a    NA
## 6      B     b    NA
## 7      B     c     2
## 8      B     d     1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;JOIN&lt;/h2&gt;
&lt;p&gt;Join these tables (E, F):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;c1&lt;/th&gt;
&lt;th&gt;c2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;c1&lt;/th&gt;
&lt;th&gt;c3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;to give (G):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;c1&lt;/th&gt;
&lt;th&gt;c3&lt;/th&gt;
&lt;th&gt;c2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We begin by making the data frames in question:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;E &amp;lt;- data.frame(c1 = c(&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;), c2 = 1:3)
FF &amp;lt;- data.frame(c1 = c(&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;A&amp;quot;), c3 = c(&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;b&amp;quot;))
G &amp;lt;- left_join(FF, E)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;c1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;kable(G)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;c1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;c3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;the &lt;code&gt;dplyr&lt;/code&gt; package supplies &lt;code&gt;left_join()&lt;/code&gt;, which preserves the sequence of rows in its left argument. Alternatively, as was originally suggested, one could use &lt;code&gt;merge()&lt;/code&gt; :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;G_merge &amp;lt;- merge(FF,E)
kable(G_merge)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;c1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;c3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;c1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;c3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Although columns now come out sorted.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;subset&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;SUBSET&lt;/h2&gt;
&lt;p&gt;subset Table G to give H:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;c1&lt;/th&gt;
&lt;th&gt;c3&lt;/th&gt;
&lt;th&gt;c2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;H &amp;lt;- filter(G,c1==&amp;quot;A&amp;quot;)
kable(H)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;c1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;c3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;c1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;c3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;transpose&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;TRANSPOSE&lt;/h2&gt;
&lt;p&gt;transpose H to give:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;V1&lt;/th&gt;
&lt;th&gt;V2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;H_transpose &amp;lt;- data.frame(t(H))
kable(H_transpose)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;c1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;c3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;c2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;c1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;c3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;c2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;sort&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;SORT&lt;/h2&gt;
&lt;p&gt;In the original, the question suggested “up to three keys”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A_arranged &amp;lt;- arrange(A,c1,c2,c3)
kable(A_arranged)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;c1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;c2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;d&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;c1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;c2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;d&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To my surprise, each of these was actually a single line. The only exception was the first (GROUP), and that was because there are really two separate steps here – the first to actually group the data, the second to apply summary functions to the data. &lt;code&gt;dplyr&lt;/code&gt; automates both tasks, and supplies great readability.&lt;/p&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Git basics</title>
      <link>/page/01_git_basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/01_git_basics/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;a-quick-introduction-to-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A quick introduction to Rstudio&lt;/h2&gt;
&lt;p&gt;We’re going to begin an introduction to Rstudio via &lt;strong&gt;Rstudio Projects&lt;/strong&gt;. Rstudio projects are a wonderful habit to adopt, because of the kind of thinking that they encourage. Using projects encourages you to organize everything related to a task within the same major folder. When you use projects regularly, you will begin to rely on this organization. In this course, you will also see how using project files helps you to communicate and share your work with others.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/rstudio_intro.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;In this screenshot you can see four panels. Clockwise from top left, here are some things to note:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The source window where R code is written&lt;/li&gt;
&lt;li&gt;the Environment and Git tabs, where new objects appear as you create them&lt;/li&gt;
&lt;li&gt;the Files tab, where you see the contents of your Rstudio project&lt;/li&gt;
&lt;li&gt;the R console&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’ll do some exercises in class to demonstrate how these four windows function together to support your workflow. Here are a few general tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;“Source is real”&lt;/em&gt;: that is, write in your R script (top left) and then send lines to the console. Save this file frequently. This will ensure that you can always reproduce your work.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;use the File window frequently: it helps to know your directory structure!&lt;/li&gt;
&lt;li&gt;use Rstudio’s &lt;em&gt;Tab Completion&lt;/em&gt;: if you start typing the name of a function or an object, then hit the &lt;code&gt;Tab&lt;/code&gt; key, Rstudio will try to help you fill it in.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;the-basic-git-dance-step&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The basic &lt;code&gt;git&lt;/code&gt; dance step&lt;/h2&gt;
&lt;p&gt;There are many resources which will help you to learn git. Today in class we are going to work with the basic rhythym of a version control workflow – the “basic git dance step”, if you will.&lt;/p&gt;
&lt;p&gt;We are going to practice these steps first in the command line, and later you will learn how to do this in Rstudio (and, perhaps, another git client of your choice).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;put-on-your-shoes-git-init&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Put on your shoes: &lt;code&gt;git init&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/bird_git_init.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Start by opening a Terminal window. You can do this directly from &lt;code&gt;Rstudio&lt;/code&gt; (version 1.1.54) via &lt;code&gt;Tools &amp;gt; Terminal &amp;gt; New Terminal&lt;/code&gt;. You will hopefully be in the current working directory. Check this by typing&lt;/p&gt;
&lt;pre class=&#34;sh&#34;&gt;&lt;code&gt;pwd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is “Print working directory” on the command line. If you are not in the same folder as your R project, you may need to change directory using &lt;code&gt;cd&lt;/code&gt;. Type&lt;/p&gt;
&lt;pre class=&#34;sh&#34;&gt;&lt;code&gt;cd path/to/project&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember again that tab completion is your friend!&lt;/p&gt;
&lt;p&gt;Once you are in the correct folder, it is time to let &lt;code&gt;git&lt;/code&gt; know it should version control this folder. Do this by typing&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see something like&lt;/p&gt;
&lt;pre class=&#34;sh&#34;&gt;&lt;code&gt;Initialized empty Git repository in /Users/amacdonald/temp/andrew-project/.git/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we take a look at how git sees our project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After which you will see something like this:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/git_status.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;left-foot-git-add&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Left foot: &lt;code&gt;git add&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/bird_stage.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Version control with &lt;code&gt;git&lt;/code&gt; is done by recording a series of small changes, known as &lt;code&gt;commits&lt;/code&gt;. Before we can make a commit, we must indicate which of the modified (or added) files the commit will concern. We do this by “adding” the file:&lt;/p&gt;
&lt;pre class=&#34;sh&#34;&gt;&lt;code&gt;git add README.md&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/git_stage_demo.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Note how the &lt;code&gt;README.md&lt;/code&gt; file has moved up into a new category, “staged”, and is now highlighted in green.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;right-foot-git-commit--m&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Right foot: &lt;code&gt;git commit -m&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/bird_commit.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Now we can make a commit! We do this using &lt;code&gt;git commit&lt;/code&gt; and simultaneously &lt;strong&gt;LEAVING A MESSAGE&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;sh&#34;&gt;&lt;code&gt;git commit -m &amp;quot;YOUR WORDS HERE&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember to put your own words where it says &lt;code&gt;YOUR WORDS HERE&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/git_commit_demo.gif&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;and-repeat&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;And repeat&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/bird_don_stop.gif&#34; /&gt;

&lt;/div&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Change a file&lt;/li&gt;
&lt;li&gt;Save&lt;/li&gt;
&lt;li&gt;Stage&lt;/li&gt;
&lt;li&gt;commit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I call this the “basic dance step” of git because it underlies every single workflow which involves git. No matter how sophisticated a particular use case may become, this is still the basic rhythym. After a bit of practice it will become second nature. Then, feel free to get as fancy as you like!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;other-resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other resources&lt;/h2&gt;
&lt;p&gt;There are many more things to learn about Version control. Here are some of my favourite resources to get you started:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nicercode.github.io/&#34;&gt;niceR code&lt;/a&gt;. An excellent, R-focussed blog by two evolutionary ecologists.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/docs/&#34;&gt;git manual&lt;/a&gt;. The Authoritative guide.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kbroman.org/github_tutorial/&#34;&gt;Karl broman’s github tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>GitHub and project setup</title>
      <link>/page/02_github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/02_github/</guid>
      <description>

&lt;h3 id=&#34;the-infrastructure-of-collaboration&#34;&gt;the infrastructure of collaboration&lt;/h3&gt;

&lt;h2 id=&#34;content-outline&#34;&gt;Content outline&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s introduce ourselves to each other (and join the &lt;a href=&#34;https://github.com/BIOL548O/&#34;&gt;course github organization&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;set up your private repository for your project

&lt;ul&gt;
&lt;li&gt;make a new private repository called &lt;code&gt;yourlastname_yourfirstname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;give it a description&lt;/li&gt;
&lt;li&gt;choose &amp;ldquo;Private&amp;rdquo;&lt;/li&gt;
&lt;li&gt;under &amp;ldquo;add .gitignore:&amp;rdquo; choose &lt;strong&gt;R&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;under &amp;ldquo;add a license:&amp;rdquo; choose &lt;strong&gt;MIT License&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;click &amp;ldquo;Create Repository&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../img/start_repo.png&#34; alt=&#34;illustration&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On the next screen you will see the beginning of your repository. Copy the link at the top of the page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open Rstudio&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select &lt;code&gt;File &amp;gt; New Project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;select &lt;code&gt;From Version Control &amp;gt; git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;paste in the link to your new repository&lt;/li&gt;
&lt;li&gt;Take charge of where this goes! &lt;strong&gt;consider creating a dedicated &lt;code&gt;Projects/&lt;/code&gt; directory&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If all has gone well, you should now have a new folder on your computer, containing the files that were created on GitHub. Let&amp;rsquo;s take a look at what you have so far:&lt;/p&gt;

&lt;h3 id=&#34;license&#34;&gt;license&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve chosen the MIT license, which is a common and very permissive license.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The MIT License (MIT)

Copyright (c) 2016 BIOL548O

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &amp;quot;Software&amp;quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gitignore&#34;&gt;.gitignore&lt;/h3&gt;

&lt;p&gt;This file expresses patterns of filenames that we want to ignore.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try adding a file name (e.g. &lt;code&gt;bigdata.nextgen&lt;/code&gt;) to your directory. Notice how it appears in Rstudio.&lt;/li&gt;
&lt;li&gt;Then add the line &lt;code&gt;*.nextgen&lt;/code&gt; to the &lt;code&gt;.gitignore&lt;/code&gt;. Notice how the Rstudio window has changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;readme&#34;&gt;README&lt;/h3&gt;

&lt;p&gt;This file explains your project to your audience on Github. At present, your audience will not extend beyond this room. In the near future, it may extend to the whole Internet!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with the help of Rstudio, let&amp;rsquo;s practice some markdown basics.&lt;/li&gt;
&lt;li&gt;You can see a handy Markdown cheatsheet in Rstudio using &lt;code&gt;Help &amp;gt; Markdown Quick Reference&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Note that there is a difference between Rstudio&amp;rsquo;s Markdown (based on &lt;a href=&#34;http://pandoc.org/&#34;&gt;Pandoc markdown&lt;/a&gt; and &lt;a href=&#34;https://help.github.com/articles/basic-writing-and-formatting-syntax/&#34;&gt;Github Flavoured Markdown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;You can also mix HTML formatting in with Markdown (for example to get superscripts you can use &lt;code&gt;&amp;lt;sup&amp;gt;&amp;lt;/sup&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;project setup&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re going to set up a basic structure for our project. Here is a template from the &lt;a href=&#34;https://github.com/ropensci/rrrpkg&#34;&gt;Ropensci/rrrpkg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Getting started with a research compendium&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start simple - it’s ok to have just one R script or one R markdown file. But as you get more complex and start to break into multiple files, that you should follow these simple conventions described above&lt;/li&gt;
&lt;li&gt;A simple example of a research compendium might look like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;project
|- DESCRIPTION          # project metadata and dependencies 
|- README.md            # top-level description of content and guide to users
|
|- data/                # raw data, not changed once created
|  +- my_data.csv       # data files in open formats such as TXT, CSV, TSV, etc.
|
|- analysis/            # any programmatic code 
|  +- my_scripts.R      # R code used to analyse and visualise data 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Homework 2</title>
      <link>/page/04_Homework_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/04_Homework_2/</guid>
      <description>

&lt;p&gt;The goal of this week&amp;rsquo;s homework is take your raw data and produce some &lt;strong&gt;tidy&lt;/strong&gt; data, using only R to perform any manipulations. Remember:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tidy data has one variable per column, and one observation per row.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will begin with your original data file, in the most raw and untouched form available to you. Here are some steps to follow.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create the following directory structure in your project:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;lastname_firstname
 |
 |--data/
 |--data-raw/
 |--Rscripts/
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Put your raw data file into your &lt;code&gt;data-raw&lt;/code&gt; directory. (e.g. &lt;code&gt;2015 Field Season.xls&lt;/code&gt;). You may choose to rename it to remove spaces in the filenames (&lt;code&gt;2015_Field_season.xls&lt;/code&gt;). &lt;strong&gt;this is the only modification to this file you get to make&lt;/strong&gt;. Some people will even modify the file permissions to make it &amp;ldquo;write only&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start an R script in the &lt;code&gt;Rscripts/&lt;/code&gt; directory. Call it something intuitive (like &lt;code&gt;01_data_preparation.R&lt;/code&gt;). I like prefacing my &lt;code&gt;.R&lt;/code&gt; files with numbers, expressing the order in which they are meant to be run. &lt;strong&gt;don&amp;rsquo;t forget to commit and push as you are writing this file!&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;read your data in, modify it to make it tidy, then write it out into the &lt;code&gt;data/&lt;/code&gt; folder. Give it a meaningful name: &lt;code&gt;data/bromeliad_nitrogen_experiment_2015.csv&lt;/code&gt; for example.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commit and push your tidy data file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;what-kind-of-things-should-i-do&#34;&gt;What kind of things should I do?&lt;/h2&gt;

&lt;p&gt;Here are a few ideas for you to think of while you tidy your data up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Do I have any repetitive variables? Were some of these variables calculated from others? use &lt;code&gt;dplyr::select()&lt;/code&gt; to drop any columns that do not represent actual measurements &amp;ndash; these can be re-calculated later&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Are my variable names sensible? Good variable names are expressive but brief. something like &lt;code&gt;mass_mg&lt;/code&gt; or &lt;code&gt;body_mass&lt;/code&gt; is good, something like &lt;code&gt;total_dry_mass_of_animal&lt;/code&gt; or &lt;code&gt;m&lt;/code&gt; is bad.  Check out &lt;code&gt;dplyr::rename()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Are my column titles actually variables? It&amp;rsquo;s not uncommon to see one (or more!) variables stored in column names:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;male_junvenile&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;male_adult&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;female_juvenile&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;female_adult&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;use &lt;code&gt;tidyr::gather()&lt;/code&gt; and &lt;code&gt;separate&lt;/code&gt; to fix this&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do I have too many repeated rows? You might find that your data would make more sense separated into more than one table, which you could then combine with &lt;code&gt;dplyr::left_join()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many ways in which a dataset can be untidy. Feel free to ask an Instructor or to confer with each other as you are making these decisions!&lt;/p&gt;

&lt;h2 id=&#34;peer-review&#34;&gt;Peer Review&lt;/h2&gt;

&lt;p&gt;This work will be graded in much the same way &amp;ndash; by a randomly assigned person from the class. They will clone your repository to their computer, read and run all your code, and examine your tidy data. Here are some things they&amp;rsquo;ll be on the lookout for:&lt;/p&gt;

&lt;h4 id=&#34;well-commented&#34;&gt;well commented&lt;/h4&gt;

&lt;p&gt;Write lots of comments. What are you doing, when and why should all be easy to understand by reading your &lt;code&gt;.R&lt;/code&gt; files. You can also use the project&amp;rsquo;s README to direct your reviewer to the necessary files!&lt;/p&gt;

&lt;h4 id=&#34;reproducible&#34;&gt;reproducible&lt;/h4&gt;

&lt;p&gt;You peer reviewer will re-runs your script, to see if they get the same result (i.e. the csv file in &lt;code&gt;/data&lt;/code&gt; should be writtin anew). They should find that it is recreated &lt;strong&gt;just as it was before&lt;/strong&gt; (i.e. git thinks that the file is unchanged.)&lt;/p&gt;

&lt;p&gt;In order for this to happen, the paths you use must be &lt;em&gt;relative&lt;/em&gt;: that is, they should start from the project working directory. That means where the rstudio project file lives. e.g. for a folder setup like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lastname_firstname
 |
 | lastname_firstname.Rproj
 |--/data
 |--/data-raw
 |--/Rscripts
            |
            |--01_tidying.R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the file &lt;code&gt;01_tidying.R&lt;/code&gt; starts with reading in data: a relative path like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;treedata &amp;lt;- read.csv(&amp;quot;data-raw/rawdata.csv&amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;tidy&#34;&gt;tidy&lt;/h4&gt;

&lt;p&gt;What &lt;em&gt;exactly&lt;/em&gt; that means for your dataset will partly depend on your definitions &amp;ldquo;observation&amp;rdquo; and &amp;ldquo;variable&amp;rdquo; for your purposes. When in doubt, describe your choices in comments in the data-cleaning file, in the projects README.md or in a README inside &lt;code&gt;data&lt;/code&gt;. You can never have too much documentation.&lt;/p&gt;

&lt;h4 id=&#34;correct&#34;&gt;correct&lt;/h4&gt;

&lt;p&gt;One simple way of validating your CSV file is to show that it displays nicely on github.&lt;/p&gt;

&lt;p&gt;If you CSV is very large, that approach might not work. In such cases you (and your reviewer) can check your CSV on sites such as &lt;a href=&#34;http://csvlint.io/&#34;&gt;csvlint.io&lt;/a&gt; and/or &lt;a href=&#34;http://setosa.io/csv-fingerprint/&#34;&gt;CSVfingerprint&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homework 3</title>
      <link>/page/07_Homework_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/07_Homework_3/</guid>
      <description>

&lt;h3 id=&#34;first-part-respond-to-your-reviewers-from-last-week&#34;&gt;First part &amp;ndash; respond to your reviewers from last week.&lt;/h3&gt;

&lt;p&gt;Peer reviewers probably raised a couple of very important points in the process of reviewing  your work. Try to address these: edit your code and re-run it. Commit and push both the modified code and the new data (if it actually different).&lt;/p&gt;

&lt;p&gt;In particular, be wary of doing things that make your R code irreproducible: &lt;code&gt;setwd()&lt;/code&gt;, &lt;code&gt;attach&lt;/code&gt;, and setting an absolute path e.g. &lt;code&gt;read.csv(&amp;quot;/home/andrew/Documents/projects/BIOL548O/BIOL548O.github.io/gapminder.csv&amp;quot;)&lt;/code&gt; rather than a relative path (e.g. assuming the project directory is &lt;code&gt;/home/andrew/Documents/projects/BIOL548O&lt;/code&gt;, you only need to specify the remaining (relative) part of the path: &lt;code&gt;read.csv(&amp;quot;BIOL548O.github.io/gapminder.csv&amp;quot;)&lt;/code&gt;).  The project directory is already set to your &lt;code&gt;lastname_firstname&lt;/code&gt; folder, because that is where the &lt;code&gt;.Rproj&lt;/code&gt; file is!&lt;/p&gt;

&lt;h3 id=&#34;second-part-assertions-and-metadata&#34;&gt;Second part &amp;ndash; Assertions and metadata&lt;/h3&gt;

&lt;p&gt;In the last two classes we practiced writing assertions and metadata. Apply these skills to your dataset to test and document it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add another file to your &lt;code&gt;Rscripts&lt;/code&gt; directory. This is a good time to start thinking about your file naming convention. A popular approach is to preface R scripts with &lt;code&gt;01_&lt;/code&gt; and &lt;code&gt;02_&lt;/code&gt; etc, to indicate the order in which they are meant to be run.&lt;/li&gt;
&lt;li&gt;This R script can have two parts (after the normal reading in of data): first write some assertions, then write the metadata. (alternatively, split it into two parts).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Writing Assertions&lt;/em&gt; Use the &lt;code&gt;assertr&lt;/code&gt; package to write some simple statements about your study. These are especially useful if they describe what &lt;em&gt;another, uncollected&lt;/em&gt; dataset would look like. (ie if somebody repeats your study, or if more observations are collected in the same way). Here&amp;rsquo;s some ideas:

&lt;ul&gt;
&lt;li&gt;Species names come from the correct set&lt;/li&gt;
&lt;li&gt;Measurement values fall in a biologically realistic range&lt;/li&gt;
&lt;li&gt;Dates are in a plausible range&lt;/li&gt;
&lt;li&gt;Columns have correct types&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Writing metadata&lt;/em&gt; Use one of the machine-readable data formats we discussed in class.

&lt;ul&gt;
&lt;li&gt;EML&lt;/li&gt;
&lt;li&gt;CSVY&lt;/li&gt;
&lt;li&gt;datapackage&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>/page/01_installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/01_installation/</guid>
      <description>

&lt;h2 id=&#34;installing-software&#34;&gt;Installing software&lt;/h2&gt;

&lt;p&gt;In this course, we&amp;rsquo;re going to use open-source software to learn how to manage and share data. Our hope is to provide you with a basic level of comfort with all of these tools, which you can use in your future projects!&lt;/p&gt;

&lt;p&gt;You will need five things during this course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a laptop&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;a GitHub account&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;Rstudio (an IDE for R)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please see installation instructions below for all the different software tools you need. These are modified from several sources, mostly from &lt;a href=&#34;http://www.stat.ubc.ca/~jenny/&#34;&gt;Jenny Bryan&amp;rsquo;s&lt;/a&gt; excellent &lt;a href=&#34;http://stat545-ubc.github.io/&#34;&gt;STAT545 website&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;git-and-github&#34;&gt;Git and Github&lt;/h2&gt;

&lt;p&gt;As you work on your data project, you will be creating a well-organized directory for sharing your project with other people. One of the best ways to share a complex project is via &lt;code&gt;git&lt;/code&gt; and its companion website &lt;strong&gt;Github&lt;/strong&gt;. Throughout this course we will be practicing interacting with both of these.&lt;/p&gt;

&lt;h3 id=&#34;do-i-already-have-git-installed&#34;&gt;Do I already have git installed?&lt;/h3&gt;

&lt;p&gt;You might want to know if you have these things installed already. R, and Rstudio, if present, are installed as regular programs on your OS. git, however, is a command line tool and may not be obvious. One way to check is by running &lt;code&gt;which git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../img/which_git.gif&#34; alt=&#34;which git&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git&lt;/code&gt; is a command-line program for doing &amp;ldquo;version control&amp;rdquo; : that is, for tracking changes to a group of files all at once. We&amp;rsquo;re going to use it to track changes to our research project (i.e. data and the code that manipulates the data).&lt;/p&gt;

&lt;h3 id=&#34;git-installation-windows&#34;&gt;Git installation: Windows&lt;/h3&gt;

&lt;p&gt;We reccommend this approach, following &lt;a href=&#34;http://software-carpentry.org&#34;&gt;Software Carpentry&lt;/a&gt;, an organization that &amp;ldquo;teaches lab skills for scientific computing&amp;rdquo; (and also STAT545):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;Git for Windows&lt;/a&gt;, previously known as &lt;code&gt;msysgit&lt;/code&gt; or &amp;ldquo;Git Bash&amp;rdquo;, to get Git in addition to some other useful tools, such as the Bash &lt;a href=&#34;git09_shell.html&#34;&gt;shell&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This approach leaves the Git executable in a conventional location, which will help you and other programs, e.g. RStudio, find it and use it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;git-installation-mac&#34;&gt;Git installation: Mac&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Option 1&lt;/strong&gt; (&lt;em&gt;recommended&lt;/em&gt;): Install Git from here: &lt;a href=&#34;http://git-scm.com/downloads&#34;&gt;http://git-scm.com/downloads&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;git-installation-linux&#34;&gt;Git installation: Linux&lt;/h3&gt;

&lt;p&gt;If Git is not already available on your machine you can install it via your distro&amp;rsquo;s package manager (e.g. &lt;code&gt;apt-get&lt;/code&gt; or &lt;code&gt;yum&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Ubuntu or Debian Linux&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fedora or RedHat Linux&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;register-a-github-account&#34;&gt;Register a GitHub account&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; is an increasingly popular website for sharing code and data. It is an excellent platform for collaborating on projects, including scientific manuscripts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register for a &lt;a href=&#34;github.com&#34;&gt;free individual GitHub account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Request &lt;a href=&#34;https://education.github.com&#34;&gt;the student discount&lt;/a&gt;. This should give you some free private repositories for a couple of years.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;next-steps&#34;&gt;Next steps&lt;/h3&gt;

&lt;p&gt;After installation, you still need to &lt;a href=&#34;01_git_introduce&#34;&gt;introduce yourself to Git&lt;/a&gt; and &lt;a href=&#34;01_git_cache&#34;&gt;get it to remember your GitHub username and password&lt;/a&gt;. If your Git client guides you through this, seize that opportunity! Otherwise follow the links for some assistance.&lt;/p&gt;

&lt;h2 id=&#34;r-and-rstudio&#34;&gt;R and RStudio&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a href=&#34;http://www.r-project.org&#34;&gt;R, a free software environment for statistical computing and graphics&lt;/a&gt; from &lt;a href=&#34;http://cran.rstudio.com&#34;&gt;CRAN&lt;/a&gt;, the Comprehensive R Archive Network. Install the precompiled binary for your Operating system.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install &lt;a href=&#34;http://www.rstudio.com/products/rstudio&#34;&gt;RStudio&amp;rsquo;s IDE&lt;/a&gt; (i.e. an &lt;em&gt;&lt;strong&gt;I&lt;/strong&gt;ntegrated &lt;strong&gt;D&lt;/strong&gt;evelopment &lt;strong&gt;E&lt;/strong&gt;nvironment&lt;/em&gt;), a powerful user interface for R. Get the Open Source Edition of RStudio Desktop (free).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We strongly suggest you try out the &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/preview/&#34;&gt;Preview version&lt;/a&gt;. You&amp;rsquo;ll often find helpful new features in these! Remember to update frequently&lt;/li&gt;
&lt;li&gt;RStudio comes with a &lt;strong&gt;text editor&lt;/strong&gt;, so there is no immediate need to install a separate stand-alone editor.&lt;/li&gt;
&lt;li&gt;RStudio can &lt;strong&gt;interface with Git(Hub)&lt;/strong&gt;. However, we will have to set that connection up first.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;add-on-packages&#34;&gt;Add-on packages&lt;/h3&gt;

&lt;p&gt;R is an extensible system and many people share useful code they have developed as a &lt;em&gt;package&lt;/em&gt; via CRAN and GitHub. To install a package from CRAN, for example the &lt;a href=&#34;https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html&#34;&gt;&lt;code&gt;dplyr&lt;/code&gt;&lt;/a&gt;  package for data manipulation, here is one way to do it in the R console (there are others).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;dplyr&amp;quot;, dependencies = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By including &lt;code&gt;dependencies = TRUE&lt;/code&gt;, we are being explicit and extra-careful to install any additional packages the target package, &lt;code&gt;dplyr&lt;/code&gt; in the example above, needs to have around.&lt;/p&gt;

&lt;p&gt;You could use the above method to install the following packages, all of which we will use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tidyr&lt;/code&gt;, &lt;a href=&#34;https://cran.r-project.org/web/packages/tidyr/index.html&#34;&gt;package webpage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggplot2&lt;/code&gt; &lt;a href=&#34;http://docs.ggplot2.org/&#34;&gt;package webpage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EML&lt;/code&gt; &lt;a href=&#34;https://github.com/ropensci/EML&#34;&gt;package webpage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;updating&#34;&gt;Updating&lt;/h3&gt;

&lt;p&gt;If you have already have R or Rstudio installed, I still &lt;strong&gt;highly reccommend&lt;/strong&gt; that you update everything first!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you upgrade R, you will need to update any packages you have installed. Copy-and-paste this to get started:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    update.packages(ask = FALSE, checkBuilt = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you may need more arguments, for example if you have a custom library location.&lt;/p&gt;

&lt;p&gt;Also note: Anything installed from GitHub will need to be manually updated, i.e. using &lt;code&gt;devtools::install_github()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;further-resources&#34;&gt;Further resources&lt;/h3&gt;

&lt;p&gt;The above will get your basic setup ready but here are some links if you are interested in reading a bit further.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to Use RStudio

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.rstudio.com/hc/en-us&#34;&gt;https://support.rstudio.com/hc/en-us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RStudio&amp;rsquo;s leads for learning R

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200717153-Getting-Help-with-R&#34;&gt;https://support.rstudio.com/hc/en-us/articles/200717153-Getting-Help-with-R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;R FAQ:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/doc/FAQ/R-FAQ.html&#34;&gt;http://cran.r-project.org/doc/FAQ/R-FAQ.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;R Installation and Administration

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/doc/manuals/R-admin.html&#34;&gt;http://cran.r-project.org/doc/manuals/R-admin.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;More about add-on packages in the R Installation and Administration Manual

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/doc/manuals/R-admin.html#Add_002don-packages&#34;&gt;https://cran.r-project.org/doc/manuals/R-admin.html#Add_002don-packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a pre-existing installation of R and/or RStudio, we &lt;strong&gt;highly recommend&lt;/strong&gt; that you reinstall and upgrade to the most recent version. It is very easy and RStudio, specifically, is changing rapidly and positively. If you upgrade R, you will need to also update any packages you have installed.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
